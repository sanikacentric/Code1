package SeptemberSelenium.SeptemberSelenium;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import java.util.Queue;
public class implementationofbintreesw {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
class Node {
	int val;
	TreeNode left;
	TreeNode right;
	
	public Node() {
		
	}
public Node(int val) {
		this.val= val;
	}
public Node(int val, TreeNode left, TreeNode right) {
	this.val= val;
	this.left=left;
	this.right=right;
	
}
public class Binarytree{
	TreeNode current;

public TreeNode addrecurssive(TreeNode current, int val) {
	if(current==null) {
		return null;
	}
	if(val<current.val) {
		current.left= addrecurssive(current.left,val);
	}
	if(val>current.val) {
		current.right= addrecurssive(current.right,val);
	}
	return current;
}
public void add(TreeNode root, int val) {
	root= addrecurssive(root, val);
}
public boolean containsrecurssive(TreeNode current, int val) {
	if(current==null) {
		return false;
	}
	if(val==current.val) {
		return true;
	}
	return val<current.val
			?containsrecurssive(current.left,val):containsrecurssive(current.right,val);
}
public boolean containsNode(int val) {
	return containsrecurssive(current, val);
}
public TreeNode deleterecurssive(TreeNode current, int val) {
	if(current==null) {
		return null;
	}
	if(val<current.val) {
		current.left=deleterecurssive(current.left,val);
	}
	if(val>current.val) {
		current.right=deleterecurssive(current.right,val);
	}
	if(current.left==null && current.right==null) {
		return null;
	}
	if(current.left==null) {
		return current.right;
	}
	if(current.right==null) {
		return current.left;
	}
	return current;
}
public int findsmallest(TreeNode root) {
	int smallestval= findsmallest(root.right);
	root.val=smallestval;
	root.right=deleterecurssive(root.right,val);
	return root.left==null?root.val:findsmallest(root.right);
}

public List<List<Integer>>breadthfirstsearch(TreeNode root){
	if(root ==null) {
		return null;
	}
	List<List<Integer>>ans= new ArrayList<>();
	Queue<TreeNode>queue= new LinkedList<>();
	queue.add(root);
	while(!queue.isEmpty()) {
		List<Integer>sublist= new ArrayList<>();
		for(int i=0;i<queue.size();i++) {
			TreeNode curr = queue.poll();//first in first out
			sublist.add(curr.val);
			if(curr.left!=null) {
				queue.add(curr.left);
			}
			if(curr.right!=null) {
				queue.add(curr.right);
			}
			ans.add(sublist);
		}
		
	}
	return ans;
}

//DepthFirstSearch - preorder and inorder
public void preordertraversal(TreeNode root) {
	if(root==null) {
		return ;
	}
	System.out.println(root.val);
	preordertraversal(root.left);
	preordertraversal(root.right);
}

public void inordertraversal(TreeNode root) {
	if(root==null) {
		return ;
	}
	inordertraversal(root.left);
	System.out.println(root.val);
	inordertraversal(root.right);
}
}
}
}
